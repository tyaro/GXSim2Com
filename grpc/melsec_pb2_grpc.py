# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import melsec_pb2 as melsec__pb2


class MelsecComServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloMsg = channel.stream_stream(
                '/melseccom.MelsecComService/HelloMsg',
                request_serializer=melsec__pb2.HelloMessage.SerializeToString,
                response_deserializer=melsec__pb2.ReplyHello.FromString,
                )
        self.BlockReadFloat = channel.stream_stream(
                '/melseccom.MelsecComService/BlockReadFloat',
                request_serializer=melsec__pb2.ReadMsg.SerializeToString,
                response_deserializer=melsec__pb2.ReplyRead.FromString,
                )
        self.BlockReadWord = channel.stream_stream(
                '/melseccom.MelsecComService/BlockReadWord',
                request_serializer=melsec__pb2.ReadMsg.SerializeToString,
                response_deserializer=melsec__pb2.ReplyRead.FromString,
                )
        self.BlockReadBit = channel.stream_stream(
                '/melseccom.MelsecComService/BlockReadBit',
                request_serializer=melsec__pb2.ReadMsg.SerializeToString,
                response_deserializer=melsec__pb2.ReplyRead.FromString,
                )
        self.BlockWriteFloat = channel.stream_stream(
                '/melseccom.MelsecComService/BlockWriteFloat',
                request_serializer=melsec__pb2.WriteMsg.SerializeToString,
                response_deserializer=melsec__pb2.ReplyWrite.FromString,
                )
        self.BlockWriteWord = channel.stream_stream(
                '/melseccom.MelsecComService/BlockWriteWord',
                request_serializer=melsec__pb2.WriteMsg.SerializeToString,
                response_deserializer=melsec__pb2.ReplyWrite.FromString,
                )
        self.BlockWriteBit = channel.stream_stream(
                '/melseccom.MelsecComService/BlockWriteBit',
                request_serializer=melsec__pb2.WriteMsg.SerializeToString,
                response_deserializer=melsec__pb2.ReplyWrite.FromString,
                )


class MelsecComServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HelloMsg(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockReadFloat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockReadWord(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockReadBit(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockWriteFloat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockWriteWord(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockWriteBit(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MelsecComServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HelloMsg': grpc.stream_stream_rpc_method_handler(
                    servicer.HelloMsg,
                    request_deserializer=melsec__pb2.HelloMessage.FromString,
                    response_serializer=melsec__pb2.ReplyHello.SerializeToString,
            ),
            'BlockReadFloat': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockReadFloat,
                    request_deserializer=melsec__pb2.ReadMsg.FromString,
                    response_serializer=melsec__pb2.ReplyRead.SerializeToString,
            ),
            'BlockReadWord': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockReadWord,
                    request_deserializer=melsec__pb2.ReadMsg.FromString,
                    response_serializer=melsec__pb2.ReplyRead.SerializeToString,
            ),
            'BlockReadBit': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockReadBit,
                    request_deserializer=melsec__pb2.ReadMsg.FromString,
                    response_serializer=melsec__pb2.ReplyRead.SerializeToString,
            ),
            'BlockWriteFloat': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockWriteFloat,
                    request_deserializer=melsec__pb2.WriteMsg.FromString,
                    response_serializer=melsec__pb2.ReplyWrite.SerializeToString,
            ),
            'BlockWriteWord': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockWriteWord,
                    request_deserializer=melsec__pb2.WriteMsg.FromString,
                    response_serializer=melsec__pb2.ReplyWrite.SerializeToString,
            ),
            'BlockWriteBit': grpc.stream_stream_rpc_method_handler(
                    servicer.BlockWriteBit,
                    request_deserializer=melsec__pb2.WriteMsg.FromString,
                    response_serializer=melsec__pb2.ReplyWrite.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'melseccom.MelsecComService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MelsecComService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HelloMsg(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/HelloMsg',
            melsec__pb2.HelloMessage.SerializeToString,
            melsec__pb2.ReplyHello.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockReadFloat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/BlockReadFloat',
            melsec__pb2.ReadMsg.SerializeToString,
            melsec__pb2.ReplyRead.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockReadWord(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/BlockReadWord',
            melsec__pb2.ReadMsg.SerializeToString,
            melsec__pb2.ReplyRead.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockReadBit(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/BlockReadBit',
            melsec__pb2.ReadMsg.SerializeToString,
            melsec__pb2.ReplyRead.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockWriteFloat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/BlockWriteFloat',
            melsec__pb2.WriteMsg.SerializeToString,
            melsec__pb2.ReplyWrite.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockWriteWord(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/BlockWriteWord',
            melsec__pb2.WriteMsg.SerializeToString,
            melsec__pb2.ReplyWrite.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockWriteBit(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/melseccom.MelsecComService/BlockWriteBit',
            melsec__pb2.WriteMsg.SerializeToString,
            melsec__pb2.ReplyWrite.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
